/******************************************************************************
Linked List 1 : Traversal


    |head| -> |  | -> |  | -> |  | -> |  | -> NULL
     ^
Temp-|

temp=temp->next


Insertion at kth position
#Start: O(1)
    | new  | -> |head| -> |  | -> |  | -> |  | -> |  | -> NULL
    |head| -> |  | -> |  | -> |  | -> |  | -> |  | -> NULL

#end:  O(n), if tail given=> O(1)
    |head| -> |  | -> |  | -> |  | -> |  | -> |  | -> NULL
traverse till last using temp
    |head| -> |  | -> |  | -> |  | -> |  | -> NULL
                                       ^
                                  Temp-|
                                  
    |head| -> |  | -> |  | -> |  | -> |  | -> NULL
                                        \    /
                                         | |      

#kth position:  O(n)
                1       2
    |head| -> |  | -> |  | -> |  | -> |  | -> |  | -> NULL
                \     /
                 |  |
    traverse till postion -1 using Temp
    link newnode to temp->next
    change nxt of pos-1 to newnode
                 
#Update at kth position:        O(k)
    |head| -> |  | -> |  | -> |  | -> |  | -> |  | -> NULL
traverse till k using temp
*******************************************************************************/
#include <iostream>
using namespace std;

class Node{
    public:
        int val;
        Node* next;

    Node(int data){
        val=data;
        next=NULL;
    }
};


void insertAtHead(Node* &head,int val){
    Node* new_node= new Node(val);
    new_node->next= head;
    head=new_node;
}

void insertAtEnd(Node* &head,int val){
    Node* new_node=new Node(val);
    Node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next = new_node;  
}

void insertAtk(Node* &head,int val,int k){
    Node* new_node= new Node(val);
    Node* temp=head;
    if (k==0){
        insertAtHead(head,val);
        return;
    }
    
    int current_pos=0;
    while(current_pos!=k-1){
        temp=temp->next;
        current_pos++;
    }
    
    new_node->next=temp->next;
    temp->next=new_node;
}

void update(Node* &head,int val,int k){
    Node* temp = head;
    int current_pos=0;
    while(current_pos!=k){
        temp=temp->next;
        current_pos++;
    }
    temp->val=val;
}

void print(Node* head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->val<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
    
}


int main()
{
    Node* head=NULL;
    insertAtHead(head,2);
    print(head);
    insertAtHead(head,3);
    // print(head);
    // insertAtHead(head,4);
    // print(head);
    // insertAtHead(head,5);
    // print(head);
    insertAtEnd(head,10);
    print(head);
    insertAtk(head,999,2);
    print(head);
    update(head,001,2);
    print(head);
    return 0;
}
